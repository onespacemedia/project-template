version: 2
jobs:
  test_python:
    working_directory: ~/{{ cookiecutter.repo_name }}
    docker:
      - image: circleci/python:3.6.2
        environment:
          - DB_USER=root
          - DB_NAME={{ cookiecutter.package_name }}
      - image: circleci/postgres:9.5.10
        environment:
          - POSTGRES_USER=root
          - POSTGRES_DB={{ cookiecutter.package_name }}
    steps:
      - checkout
      - restore_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}{% endraw %}
      - run:
          name: install python dependencies
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -U setuptools
            pip install -r requirements.txt
      - save_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}{% endraw %}
          paths:
            - .venv
      - run:
          name: pylint
          command: |
            . .venv/bin/activate
            pylint {{ cookiecutter.package_name }}
      - run:
          name: iSort
          command: |
            . .venv/bin/activate
            isort
      - run:
          name: tests
          command: |
            . .venv/bin/activate
            python manage.py test

  test_assets:
    working_directory: ~/{{ cookiecutter.repo_name }}
    docker:
      - image: circleci/node:12.12.0
    steps:
      - checkout
      - restore_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "package.json" }}{% endraw %}
      - run:
          name: install npm dependencies
          command: |
            yarn install
      - save_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "package.json" }}{% endraw %}
          paths:
            - ./node_modules
      - run:
          name: stylelint
          command: |
            yarn run lint:css
      - run:
          name: eslint
          command: |
            yarn run lint:js

  deploy_staging_site:
    working_directory: ~/{{ cookiecutter.repo_name }}
    docker:
      - image: circleci/python:3.6.2
      - image: circleci/postgres:9.5.10
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: {{ cookiecutter.package_name }}
    steps:
      - checkout
      - restore_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}{% endraw %}
      - run:
          name: install python dependencies
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -U setuptools
            pip install -r requirements.txt
      - save_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}{% endraw %}
          paths:
            - .venv
      - run:
          name: deploy
          command: |
            . .venv/bin/activate
            python manage.py update --remote=staging --commit=$CIRCLE_SHA1

  deploy_production_site:
    working_directory: ~/{{ cookiecutter.repo_name }}
    docker:
      - image: circleci/python:3.6.2
      - image: circleci/postgres:9.5.10
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: {{ cookiecutter.package_name }}
    steps:
      - checkout
      - restore_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}{% endraw %}
      - run:
          name: install python dependencies
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -U setuptools
            pip install -r requirements.txt
      - save_cache:
          key: {% raw %}deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}{% endraw %}
          paths:
            - .venv
      - run:
          name: deploy
          command: |
            . .venv/bin/activate
            python manage.py update --remote=production --commit=$CIRCLE_SHA1

workflows:
  version: 2
  test:
    jobs:
      - test_python
      - test_assets
      - deploy_staging_site:
          requires:
            - test_python
            - test_assets
          filters:
            branches:
              only:
                - develop
      - deploy_production_site:
          requires:
            - test_python
            - test_assets
          filters:
            branches:
              only:
                - master
